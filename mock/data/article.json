{
  "content": "为了方便，案列都使用vue做演示\n## 滚动加载\n逻辑：计算数据滚动区高度，计算当前滚动条离顶部高度，计算数据可视区域高度，滚动区域=离顶部高度+可视高度即到底部了。\n\n注意：如果不提供手动加载按钮，就需要根据数据调整第一页数据填充数据区域高度使它出现滚动条。\n### 代码示例\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Title</title>\n</head>\n<body>\n<div id=\"v\">\n  <div v-for=\"(item,i) of list\" :key=\"i\">\n    <h5>{{item.id}}</h5>\n    <h3>{{item.date}}</h3>\n  </div>\n</div>\n\n<script src=\"https://cdn.bootcss.com/vue/2.6.8/vue.min.js\"></script>\n<script>\n  new Vue({\n    el: '#v',\n    data: {\n      list: [],// 存放数据\n    },\n    mounted() {\n      // 获取首页数据\n      this.getList();\n\n      // 绑定滚动事件\n      window.addEventListener('scroll', () => this.initList());\n    },\n    methods: {\n      getList() {\n        // 模拟数据\n        for (let i = 0; i < 20; i++) {\n          this.list.push({\n            id: Math.random(),\n            date: new Date()\n          });\n        }\n      },\n      initList() {\n        // 滚动条移动长度\n        let sTop = document.documentElement.scrollTop || document.body.scrollTop;\n        // 当前页面总长度\n        let sHeight = document.documentElement.scrollHeight || document.body.scrollHeight;\n        // 可见的页面长度\n        let ch = document.documentElement.clientHeight;\n\n        // 滑到了最下面接近30px附近，获取下一页数据，防止计算不精确\n        if (sTop + ch + 30 >= sHeight) {\n          this.getList();\n        }\n      }\n    }\n  })\n</script>\n</body>\n</html>\n```\n## 延迟展示\nvue循环不好控制中间过程，差不多的意思也就是控制不了循环的生命周期。\n\n逻辑：多数时候是要使用动画展示，这里分享我使用简单粗暴的逻辑，先都vue将dom渲染完毕，但全部给隐藏。\n\n注意：display和visibility是有区别的，display在页面上不会为dom占据自己那份空间，而visibility则会，所以在结合滚动加载的时候，需要使用visibility，这里显示无所谓。\n\n### 代码示例\n这里使用一下动画库[animate.css](https://daneden.github.io/animate.css/)\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Title</title>\n  <link href=\"https://cdn.bootcss.com/animate.css/3.7.0/animate.min.css\" rel=\"stylesheet\">\n  <style>\n    .no-ani {\n      visibility: hidden;\n    }\n  </style>\n</head>\n<body>\n<div id=\"v\">\n  <div class=\"no-ani animated\"\n       ani=\"zoomIn\"\n       v-for=\"(item,i) of list\"\n       :key=\"i\">\n    <h5>{{item.id}}</h5>\n    <h3>{{item.date}}</h3>\n  </div>\n</div>\n\n<script src=\"https://cdn.bootcss.com/vue/2.6.8/vue.min.js\"></script>\n<script>\n  new Vue({\n    el: '#v',\n    data: {\n      list: [],// 存放数据\n    },\n    mounted() {\n      // 获取首页数据\n      this.getList();\n\n      // 显示一下第一页\n      // 没有使用到promise，所以做一下延迟，也可以利用钩子函数保证dom挂载完成\n      setTimeout(() => {\n        this.initList();\n      }, 500);\n\n      // 绑定滚动事件\n      window.addEventListener('scroll', () => this.initList());\n    },\n    methods: {\n      getList() {\n        // 模拟数据\n        for (let i = 0; i < 20; i++) {\n          this.list.push({\n            id: Math.random(),\n            date: new Date()\n          });\n        }\n      },\n      initList() {\n        // 滚动条移动长度\n        let sTop = document.documentElement.scrollTop || document.body.scrollTop;\n        // 当前页面总长度\n        let sHeight = document.documentElement.scrollHeight || document.body.scrollHeight;\n        // 可见的页面长度\n        let ch = document.documentElement.clientHeight;\n\n        // 滑到了最下面接近30px附近，获取下一页数据，防止计算不精确\n        if (sTop + ch + 30 >= sHeight) {\n          this.getList();\n        }\n\n        // 未显示的列表\n        let domList = document.getElementsByClassName('no-ani');\n\n        // 扁你一下隐藏的dom\n        Array.prototype.slice.apply(domList).forEach((item, i) => {\n          // 判断该是否组件是否到可视页面\n          if (sTop + ch > item.offsetTop) {\n\n            // 每一个小模块都在上一个模块的基础上多200毫秒显示\n            setTimeout(() => {\n              // 删除不显示控制\n              item.classList.remove('no-ani');\n              // 添加指定动画\n              item.classList.add(item.getAttribute('ani'));\n              // 删除指定属性\n              item.removeAttribute('ani')\n            }, 200 * i);\n          }\n        });\n      }\n    }\n  })\n</script>\n</body>\n</html>\n```\n以上代码都可以直接拷贝运行\n",
  "content1": "本文记录搭建Vue开发环境的过程一阶段\n\n### 初始化项目\n```bash\nnpm init -y\n```\n### 创建第一阶段项目结构\n```bash\n├─ config\n│  ├─ config.js                   # 构建配置\n│  ├─ webpack.base.js             # webpack基础配置，将开发和构建公共部分提出来\n│  ├─ webpack.build.js            # 构建配置\n│  ├─ webpack.dev.js              # 开发配置\n├─ mock                           # 模拟数据\n├─ public\n│  └─ favicon.ico                 # favicon\n├─ src                            # 源文件\n│  ├─ assets                      # 静态资源\n│  ├─ components                  # 组件放这儿\n│  ├─ js                          # 不采用单页面，这里存放js文件\n│  ├─ pages                       # 页面\n│  ├─ style                       # 样式文件夹\n│  └─ global.scss                 # 全局样式\n├─ .gitignore                     \n├─ package.json\n├─ README.md                      # 项目说明文件\n```\n### 第二阶段，实现构建功能\n#### 安装webpack，配置基础出入口并测试\n```bash\nnpm install --save-dev webpack webpack-cli\n```\n注意：4以上版本，将webpack-cli一起安装\n第一步，在js目录创建入口文件index.js，键入一下测试代码\n\n___index.js___\n```js\nconst indexArr = [1, 2, 3, 4, 5];\n\nindexArr.forEach(item => console.log(item));\n```\n第二步，在webpack.base.js文件中键入一下代码（参考官网说明）\n\n___webpack.base.js___\n```js\nconst path = require('path');\n\nconst baseConfig = {\n  entry: {\n    index: './src/js/index.js'\n  },\n  output: {\n    path: path.resolve(__dirname, '../dist'),\n    filename: '[name].js'\n  }\n};\n\nmodule.exports = baseConfig;\n```\n第三步，在命令行中键入一下代码测试\n```bash\nwebpack --config=config/webpack.base.js\n```\n在根目录下会生成dist文件夹，对应index.js，在js文末可找到我们的代码。\n\n注意：没有全局安装webpack和cli时，在行命令中可能会出现xxx不存在，这是全局安装一下即可，或者在webstorm中开发，不受影响。\n#### 安装html-webpack-plugin，编辑页面打包配置\n```bash\nnpm install --save-dev html-webpack-plugin\n```\n第一步，在pages文件夹下新建一个index.html页面（这里不采用lodash模板生成方式，自行新建文件），我的文件内容\n\n___index.html___\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<div id=\"index\"></div>\n</body>\n</html>\n```\n第二步，修改一下index.js\n\n___index.js___\n```js\ndocument.getElementById('index').innerText = '今天是2019年8月19日';\n```\n第三步，修改webpack配置\n\n___webpack.base.js___\n```js\nconst path = require('path');\n// HTML模块\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst baseConfig = {\n  entry: {\n    index: './src/js/index.js'\n  },\n  output: {\n    path: path.resolve(__dirname, '../dist'),\n    filename: '[name].js'\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: '首页',\n      filename: 'index.html',\n      minify: {\n        // 删除属性引号\n        removeAttributeQuotes: true,\n        // 清除换行等\n        collapseWhitespace: true,\n        // 清除注释\n        removeComments: true\n      },\n      // 该页面需要引用那些js\n      chunks: ['index'],\n      // 是否添加hash参数，这对于版本控制很有效\n      hash: true,\n      // 模板位置\n      template: './src/pages/index.html',\n      cache: true,\n      favicon: path.resolve('./public/favicon.ico')\n    })\n  ]\n};\n\nmodule.exports = baseConfig;\n```\n第四步，键入命令打包文件测试\n#### 处理页面样式\n在学习了解less或sass后，就用起来\n第一步，安装loader（自行了解每个项目的意义）\n```bash\nnpm install css-loader style-loader sass-loader node-sass --save-dev\n```\n第二步，编写rules，向baseConfig添加以下代码\n\n___webpack.base.js___\n```js\nmodule: {\n    rules: [\n        {\n            test: /\\.css$/,\n            use: ['style-loader', 'css-loader']\n        },\n        {\n            test: /\\.scss$/,\n            use: [\n                // 将 JS 字符串生成为 style 节点\n                \"style-loader\",\n                // 将 CSS 转化成 CommonJS 模块\n                \"css-loader\",\n                // 将 Sass 编译成 CSS，默认使用 Node Sass\n                \"sass-loader\"\n            ]\n        }\n    ]\n}\n```\n第三步，键入测试代码\n\n___global.scss___\n```css\na {\n  text-decoration: none;\n  color: #3194d0;\n}\n```\n___index.js___\n```js\nimport '../style/global.scss';\n\ndocument.getElementById('index').innerHTML = '<a>今天是2019年8月19日</a>';\n```\n第四步，键入打包命令，使用浏览器打开生成的index.html\n```bash\nwebpack --config=config/webpack.base.js\n```\n可以看到“今天是2019年8月19日”字样是蓝色的\n#### 处理页面引入静态资源\n包括了图片、字体等，我们需要使用到的loader有html-withimg-loader、url-loader、file-loader\n```bash\nnpm install --save-dev html-withimg-loader url-loader file-loader\n```\n_踩坑：url-loader内部封装file-loader，但是仍然依赖file-loader，在使用url-loader打包字体文件时，就会发现问题_\n\n第一步、编辑loader配置，向module-rules添加以下代码\n\n___webpack.base.js___\n```js\n{\n  test: /\\.(eot|woff|woff2|svg|ttf)([?]?.*)$/,\n  loader: 'url-loader',\n  options: {\n    name: 'fonts/[hash:12].[ext]',\n    // 注意，url-loader会准确把小于20000b字体文件转换成base64放到js中\n    // 在不写limit时，limit默认为无穷大，即全部字体都转换\n    // 会导致js很大，但是，在解决字体文件跨域问题很有效\n    limit: 20000,\n    prefix: 'font',\n  }\n},\n{\n  test: /\\.html$/,\n  loader: 'html-withimg-loader',\n  options: {\n    // 除了img的src,还可以继续配置处理更多html引入的资源\n    attrs: ['img:src', 'img:data-src', 'audio:src']\n  }\n},\n{\n  test: /\\.(png|jpg|gif|jpeg|ico)/,\n  use: [{\n    loader: 'url-loader', // 指定使用的loader\n    options: {\n      // 把小于10kb的文件打成Base64的格式，写入JS\n      // 也可以在将上面写成loader: 'url-loader?limit=10000'\n      limit: 10000,\n      // 打包后的图片放到images文件夹下，文件名为12位hash码\n      name: 'images/[hash:12].[ext]',\n    }\n  }]\n}\n```\n第二步、编写测试案例\n首先，准备一张图片和一份图标文件（可以去阿里的iconfont找自己喜欢的\n\n___index.html___\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n</head>\n<body>\n<img src=\"../assets/images/logo.png\" alt=\"\">\n<span class=\"iconfont icon-smile\"></span>\n<div id=\"index\"></div>\n</body>\n</html>\n```\n\n___index.js___\n```js\nimport '../style/global.scss';\nimport '../assets/fonts/site-icon/iconfont.css';\n\ndocument.getElementById('index').innerHTML = '<a>今天是2019年8月19日</a>';\n```\n最后运行打包命令测试\n![](https://zbfcqtl-1252753142.cos.ap-chengdu.myqcloud.com/art/36/6b0765d2-c287-11e9-841d-00e04c362bef.png)\n\n#### 处理es6语法\n第一步、安装babel全家桶\n```bash\nnpm install -D babel-loader @babel/core @babel/preset-env babel-plugin-transform-runtime\n```\n把 babel-runtime 安装为一个依赖\n```bash\nnpm install @babel/runtime\n```\n\n第二步、编辑配置文件\n\n___webpack.base.js___\n```js\nrules: [\n    // ...\n    {\n      // 'transform-runtime' 插件告诉 Babel\n      // 要引用 runtime 来代替注入。\n      test: /\\.js$/,\n      exclude: /(node_modules|bower_components)/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: ['@babel/preset-env'],\n          plugins: ['@babel/plugin-transform-runtime']\n        }\n      }\n    }\n]\n```\n第三步、测试\n\n___index.js___\n```js\nconst indexArr = [1,2,3,4,5];\n\nindexArr.forEach(item => console.log(item));\n```\n#### 实现Vue基础开发环境\n```bash\nnpm install --save-dev vue-loader vue-template-compiler\n```\nVue依赖\n```bash\nnpm install vue\n```\n编辑加载配置\n\n___webpack.base.js___\n```js\n// vue-loader\nconst VueLoaderPlugin = require('vue-loader/lib/plugin');\n\n// ...\nresolve: {\n  // 引入路径是不用写对应的后缀名\n  extensions: ['.js', '.vue', '.json'],\n  // 缩写扩展\n  alias: {\n    // 正在使用的是vue的运行时版本，而此版本中的编译器时不可用的，我们需要把它切换成运行时 + 编译的版本\n    'vue$': 'vue/dist/vue.esm.js',// 'vue/dist/vue.common.js' for webpack 1\n    // 用@直接指引到src目录下，如：'./src/main'可以写成、'@/main'\n    '@': path.resolve(__dirname, './src'),\n  }\n},\nmodule: {\n  rules: [\n     // ...\n    {\n       test: /\\.vue$/,\n       loader: 'vue-loader'\n    }\n  ]\n}\n```\n新建一个index.vue组件\n```html\n<template>\n    <div>\n        <ul>\n            <li v-for=\"(item,index) of indexArr\"\n                :key=\"index\">\n                {{index}}:{{item}}\n            </li>\n        </ul>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                indexArr: [1, 2, 3, 4, 5]\n            }\n        },\n        mounted() {\n            console.log(new Date());\n        }\n    }\n</script>\n\n<style lang=\"scss\" scoped>\n    ul {\n        li {\n            color: red;\n        }\n    }\n</style>\n```\n\n___index.js___\n```js\nimport Vue from 'vue';\nimport ZfIndex from '../components/index';\n\nnew Vue({\n    el: '#index',\n    components: {\n        ZfIndex\n    },\n    template: `<zf-index/>`\n});\n```\n\n打包测试\n![](https://zbfcqtl-1252753142.cos.ap-chengdu.myqcloud.com/art/36/c954443f-c28f-11e9-841d-00e04c362bef.png)\n下一篇：[使用Webpack搭建Vue开发脚手架二](7a5145ea-37.html)"
}
